name: Build and Push Docker Image

permissions:
  contents: read
  packages: write
  issues: write
  pull-requests: write

on:
  # Manual trigger (existing functionality)
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - dev
          - dev-history_closed_by_assignee
      docker_tag:
        description: 'Docker tag (leave empty for latest)'
        required: false
        type: string
        default: ''
      push_to_registry:
        description: 'Push to registry'
        required: true
        type: boolean
        default: true
  
  # Automatic trigger for PRs merged into main
  pull_request:
    branches: [main]
    types: [closed]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'

jobs:
  # Build and push Docker image
  build-and-push:
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.push_to_registry == 'true' || github.event_name == 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/hts-pylon-db
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.docker_tag || 'latest') || 'latest' }}
            type=raw,value=${{ github.run_number }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.push_to_registry == 'true' || github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image details
        run: |
          echo "🏷️ Built tags:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/  - /'
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "🚀 Automatic build triggered by merged PR"
            echo "📋 PR: ${{ github.event.pull_request.html_url }}"
            echo "👤 Author: ${{ github.event.pull_request.user.login }}"
            echo "🏷️ Always tagged as 'latest' for merged PRs"
          else
            echo "🔧 Manual build triggered"
            echo "🌿 Branch: ${{ github.event.inputs.branch }}"
            echo "🏷️ Tag: ${{ github.event.inputs.docker_tag || 'latest' }}"
            echo "📤 Push to registry: ${{ github.event.inputs.push_to_registry }}"
          fi

  # Comment on PR with build results
  pr-comment:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🐳 Docker build triggered')
            );
            
            const commentBody = `🐳 **Docker build triggered by merged PR**
            
            ✅ **Status**: Build completed successfully
            
            🏷️ **Tags created**:
            \`\`\`
            ghcr.io/${{ github.repository_owner }}/hts-pylon-db:latest
            ghcr.io/${{ github.repository_owner }}/hts-pylon-db:${{ github.run_number }}
            ghcr.io/${{ github.repository_owner }}/hts-pylon-db:${{ github.ref_name }}-${{ github.sha }}
            \`\`\`
            
            📦 **Registry**: [GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs/container/hts-pylon-db)
            
            🔗 **Build details**: [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }